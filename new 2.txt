Where will timers and stuff be set?

`events` and `callbacks` will be the base apis, both of which are standalone
`procedures` will be a separate api that use callbacks and events
    - A procedure would basically be a listener that only listens for events that are registered to it.
    - They'll handle listening for and calling events appropriately.

`sync` would provide automatic processing, reception, and transmission of events
    - When a synced event is created/removed, announce it to all computers (respectively, perhaps by port or a tag, where computers would listen to that port/tag for add/removal announcements of events). Add/remove it to/from the events list of all computers that hear the announcement (and the one that announced it of course).
    - Callbacks will not be synced, as they could potentially have different uses on different computers.
        - For example say a turtle calls a synced event every time it moves. One computer could use the event to display the turtle's position on a monitor and another could use it to determine it's next movement.
    - When a synced event is called, announce the called event. In each computer listening for this event, call it. 
    - Adds "syncid" to new events, this id will be used for announcements and will be synced.
    - Add "synctag" to new events, computers could only be listening for specific event tags.
    
    - Would also sync procedures prolly.





for the listener;
- `gorton_event` will be the event name on os.pullEvent for all gorton `event` events by default.
    - it will always be queued with (`gorton_event`, event id, procedure id, other params).
- other events should be checked for (event name/timer id, other params depending on type), like normal.
